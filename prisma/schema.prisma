generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "sqlite"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          String    @id @default(uuid())
  username    String    @unique
  password    String
  name        String?
  email       String?
  phoneNumber String?
  pictureUrl  String?
  role        String?   @default("guest")
  bookings    Booking[]
  reviews     Review[]
}

model Host {
  id          String     @id @default(uuid())
  username    String     @unique
  password    String
  name        String?
  email       String?
  phoneNumber String?
  pictureUrl  String?
  aboutMe     String?
  role        String?    @default("host")
  listings    Property[]
}

model Property {
  id            String    @id @default(uuid())
  title         String
  description   String
  location      String
  pricePerNight Float
  bedroomCount  Int
  bathRoomCount Int
  maxGuestCount Int
  hostId        String
  rating        Int?
  host          Host      @relation(fields: [hostId], references: [id], onDelete: Cascade)
  bookings      Booking[]
  reviews       Review[]
  amenities     Amenity[] @relation("PropertyAmenities")

  @@index([hostId])
}

model Booking {
  id             String   @id @default(uuid())
  userId         String
  propertyId     String
  checkinDate    DateTime
  checkoutDate   DateTime
  numberOfGuests Int
  totalPrice     Float
  bookingStatus  String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property       Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([propertyId])
}

model Review {
  id         String   @id @default(uuid())
  userId     String
  propertyId String
  rating     Int
  comment    String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([propertyId])
}

model Amenity {
  id         String     @id @default(uuid())
  name       String
  properties Property[] @relation("PropertyAmenities")
}

model PropertyAmenities {
  A String
  B String

  @@unique([A, B], map: "_PropertyAmenities_AB_unique")
  @@index([B], map: "_PropertyAmenities_B_index")
  @@map("_PropertyAmenities")
}
